@import "themes/ucsb/variables"; // needs to precede `application`
@import "application";
@import url("https://webfonts.brand.ucsb.edu/webfont.min.css");

/* Base Stylings *****/

html,
body {
  margin: 0;
  color: $text-on-light;
  background: $base-white;
  font-family: Avenir, "Century Gothic", sans-serif;
  font-weight: 200;
  line-height: 1.75;
}
body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}
body>* {
  // Each child of body should be in its own stacking context to prevent things
  // in, say, page content from sitting on top of things in, say, the header.
  position: relative;
  z-index: 0;

  :root & {
    // Overrides to what Bootstrap thinks the margins and paddings of these
    // things should be to match the UCSB website.
    //
    // These numbers are awkward because the UCSB website awkwardly specifies
    // everything in awkward pixel counts (.9375rem = 15px), which is a
    // consequence of it being built on Bootstrap 3.
    margin: 0;
    padding: 0 .9375rem;
    max-width: none;

    @include media-breakpoint-up(lg) {
      // More padding on wider screens. This is the breakpoint the UCSB website
      // uses; I’m not questioning it.
      padding: 0 1.875rem;
    }
    &>* {
      // Each child of body should consist of one or more further children which
      // are centred with this max-width.
      margin: 0 auto;
      max-width: 76.875rem;
    }
  }
}

/* Eyebrow *****/

#eyebrow {
  // Because this appears first, its dropdowns will get covered up by the body
  // content if we don’t give it a positive z-index.
  color: $text-on-dark;
  background: $starlight-primary;
  font-weight: 100;
  font-size: .75rem;
  line-height: calc(1.25rem);
  letter-spacing: calc(7em / 90);
  z-index: 2;

  * {
    // This bit disables some bootstrap styling. It depends on the fact that id
    // selectors have higher precedence than class selectors, so things will
    // break if you change the above selector to not match by id.
    padding: 0;
  }
  a[href] {
    color: inherit;
  }
  &>nav {
    // This uses a bit of a grid hack: The grid is three columns wide and the
    // collapse menu is two columns, so it will show inline with the title if
    // the button is hidden and on the next row if the button is visible. The
    // third column has a width of zero because content shouldn’t ever actually
    // be slotted in there.
    display: grid;
    position: relative;
    padding: .5rem 0;
    grid: auto-flow / auto auto 0;
    gap: 1rem 0;
    align-items: center;

    .navbar {
      display: contents; // go away bootstrap

      .navbar-toggler {
        box-sizing: content-box;
        margin: -.5em 0 -.5em auto;
        padding: .25em .75em;
        width: 1.5em;
        height: 1.5em;
        font-size: inherit;

        .navbar-toggler-icon {
          display: block;
          width: 100%;
          height: 100%;
        }
      }
    }
  }
}
#user-util-collapse {
  grid-column-end: span 2;
  align-self: stretch;
  letter-spacing: calc(5em / 90);
  text-transform: uppercase;

  &>ul { // the collapse list
    height: 100%;
    gap: 1rem calc(2rem + 1px);

    &>li { // items in the collapse
      display: block;
      position: relative;
      margin: auto 0;

      &.dropdown {
        a:not(:focus-visible) {
          outline: none
        }
        .dropdown-menu {
          top: calc(100% + .5rem);
          left: auto;
          right: calc(-1rem - 1px);
          margin: 0;
          border: none;
          border-radius: 0;
          padding: .5rem 0;
          color: $text-on-dark;
          background: $starlight-dark-primary;
          text-transform: none;

          .dropdown-item {
            padding: .75rem 1.5rem;
            font-weight: inherit;

            &:hover {
              background: $starlight-primary;
            }
          }
          .dropdown-divider {
            margin: .5rem .375em;
            border-color: currentcolor;
            opacity: .12;
          }
        }
        &.show::after { // background for activated dropdown
          // This is supposed to cover up the dividers on either side, so it
          // needs to be implemented as an absolutely-positioned block with
          // higher z-index.
          display: block;
          position: absolute;
          top: 0;
          bottom: 0;
          left: 0;
          right: 0;
          margin: -.5rem -.9375rem;
          background: $starlight-dark-primary;
          z-index: -1;
          content: "";

          @include media-breakpoint-up(md) {
            left: -1px;
            right: -1px;
            margin: -.5rem -1rem;
          }
        }
      }
      @include media-breakpoint-up(md) {
        &+li::before {
          // This creates the dividers between collapse items
          display: block;
          position: absolute;
          top: 0;
          bottom: 0;
          right: 100%;
          margin: auto 1rem;
          height: 2em;
          width: 1px;
          background: currentcolor;
          opacity: .12;
          z-index: -2;
          content: "";
        }
      }
    }
  }
}

/* Site Header *****/

#site-header {
  color: $starlight-primary;
  background: $lightgray-lighten-6;

  a[href] {
    color: inherit;
  }
  &>div {
    display: flex;
    flex-flow: row wrap;
    padding: 1.25rem 0;
    gap: .5rem;
    justify-content: space-between;
    line-height: 1;

    svg {
      color: inherit;
      fill: currentcolor;
      stroke: transparent;
      height: auto;
      width: 13rem;
    }
  }
}

/* Masthead *****/

body>.masthead {
  // We don’t want the image in the masthead to appear behind the navigation,
  // just the title. We use CSS grid to achieve this, by just slotting them both
  // into the same cell.
  //
  // The first row of this grid is not used; it is just for sizing in the case
  // of an image masthead.
  //
  // There is really no good reason to prevent linebreaks in this title, so I’ve
  // gone against upstream and allowed them. I don’t see why people on mobile
  // devices should be restricted to just viewing the first dozen characters of
  // the name of the exhibit they’re on.
  //
  // The z-index here is to ensure that masthead dropdowns appear on top of
  // content.
  display: grid;
  border: none;
  grid-template-rows: 0 1fr auto;
  color: $starlight-primary;
  background: $lightgray-lighten-6;
  white-space: normal;
  z-index: 1;

  &::before {
    // Fill the first row so nothing gets slotted in there.
    grid-area: 1 / 1 / span 1 / span 1;
    content: ""
  }
  &.image-masthead {
    grid-template-rows: 1fr 1fr auto;
  }
  &.image-masthead>.background-container,
  &.image-masthead>.background-container-gradient {
    position: static;
    grid-area: 1 / 1 / span 2 / span 1;
    margin: 0 -.9375rem;
    border: none;
    height: 100%;
    max-width: none;

    @include media-breakpoint-up(lg) {
      margin: 0 -1.875rem;
    }
  }
  &>.site-title-container {
    // Extremely annoyingly, the default styles apply !important padding to this
    // container. This works around it by just adding corresponding negative
    // margins to the wrapper it contains (why is there both a container and a
    // wrapper?!).
    grid-area: 2 / 1 / span 1 / span 1;
    max-height: none;
    white-space: normal;

    &>.site-title-wrapper {
      margin: -.5rem -1.5rem; // see comment above
      padding: 2.5rem 0 1rem;
      font-weight: 400;
      line-height: 1;
      white-space: normal;

      &>* {
        display: block;
        font-weight: inherit;
        line-height: inherit;
      }
    }
  }
  &>.exhibit-navbar {
    box-sizing: content-box; // don’t include padding, which is offset by margin
    position: relative;
    margin: 0 -.9375rem;
    padding: 0 .9375rem;
    min-width: 100%; // override max-width without unsetting
    color: $text-on-light;
    background: $base-lightgray;
    z-index: 0;

    @include media-breakpoint-up(lg) {
      margin: 0 -1.875rem;
      padding: 0 1.875rem;
    }
    &>.container {
      margin: 0 auto;
      padding: 0;
      max-width: inherit;
      gap: 0 1.25rem;
      justify-content: start;

      .navbar-nav {
        gap: 0 1.25rem;
        font-weight: 400;
        text-transform: none;

        .nav-item {
          .nav-link {
            display: block;
            padding: .75rem 0;
            color: inherit;

            &:hover {
              // Overridden in the horizontal (wide) layout.
              text-decoration: underline;
            }
          }
          &.active .nav-link {
            // Overridden in the horizontal (wide) layout.
            font-weight: 500;
          }
          @include media-breakpoint-up(md) {
            &.active .nav-link,
            .nav-link:hover {
              // This really only looks good in the horizontal layout.
              margin-bottom: -1px;
              border-bottom: 3px solid;
              padding-bottom: calc(.75rem - 2px);
              font-weight: inherit;
              text-decoration: none;
            }
          }
        }
        .search-query-form {
          // Annoyingly, a 1rem top margin is inserted as !important by the base
          // application stylesheet in the parent <div> at small sizes, so we
          // need to compensate for that here.
          //
          // It personally offends my sensibilities to have so much horizontal
          // padding on this element in narrow layouts, so I’ve reduced it to
          // match the vertical.
          margin: -.75rem -.75rem .25rem;

          @include media-breakpoint-up(md) {
            margin: .25rem 0;
          }
          &>.input-group {
            margin: -2px 0;

            .search-q {
              border-color: $unofficial-dark-lightgray;
              padding: .5rem 1rem;
              height: auto;
              line-height: 1.75;
              white-space: nowrap;
            }
            .search-btn {
              max-height: none;

              .submit-search-text {
                // This has screenreader-only styling by default.
                all: unset;
              }
              .blacklight-icons svg {
                width: 1.25em;
                height: 1.25em;
                vertical-align: text-top;
              }
            }
          }
        }
      }
    }
  }
}

/* Breadcrumbs *****/
.breadcrumbs-container {
  &>.row>div {
    padding: 0;
  }
  ul.breadcrumb {
    margin: 1rem 0 3.5rem;
    padding: 0;
    background: none;
    font-size: .75em;

    .breadcrumb-item {
      &.active {
        color: inherit;
      }
      &+.breadcrumb-item::before {
        color: $unofficial-fade-gray;
      }
    }
    a[href] {
      text-decoration: underline;
    }
  }
}

/* Main Container *****/
#main-container {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
}
#content {
  h1,
  h2,
  h3 {
    color: $lightgray-darken-80;
    font-weight: 600;
    line-height: 1.6;

    &.card-title {
      margin: 0 0 .625rem;
      font-size: 1.3125rem;
      letter-spacing: inherit;
    }
    &>p {
      // This happens for some reason??????
      all: unset;
      display: contents;
    }
  }
  h1 {
    margin: 0 0 1.5rem;
    font-size: 2.5rem;
  }
  h2 {
    margin: 1.625rem 0 .625rem;
    font-size: 1.6875rem;
    letter-spacing: -.005em;
  }
  h3 {
    margin: 1.25rem 0 .625rem;
    font-size: 1.3125rem;
  }
  h4,
  h5,
  h6 {
    margin: 1rem 0 .5rem;
  }
  h4 {
    font-size: 1.25rem;
    line-height: 1.15;
  }
  h5 {
    font-size: calc(17rem / 16);
    line-height: calc(20 / 17);
  }
  h6 {
    font-size: 1rem;
    line-height: 1.1875;
  }
  iframe {
    display: block;
    margin: auto;
  }
  b,
  strong {
    font-weight: bold;
  }
  .browse-landing,
  .spotlight-flexbox.browse-categories { // browse boxen
    display: grid;
    grid: auto-flow / 1fr;
    gap: 1rem;

    @include media-breakpoint-up(sm) {
      // On wider screens, use three columns.
      grid: auto-flow / repeat(3, 1fr);
    }
    :not(a) {
      // Depending on the situation, there may be a number of nested elements here
      // with different classnames, etc. Set them all to just display contents and
      // then undo this for the links and their children as necessary.
      display: contents;
    }
    a {
      display: block;
      position: relative;
      text-decoration: none;

      * {
        display: block;
        position: static;
      }
      @supports (aspect-ratio: 4 / 3) {
        // aspect-ratio is new enough that it might not be supported everywhere
        // (like older phones). Fall back to (unfortunate) default Starlight
        // sizing in this case.
        //
        // This CSS also depends on the grid layout being in effect, but grid
        // should be supported everywhere which supports aspect-ratio.
        .image-overlay,
        .browse-category {
          // The max-width here ensures that these boxen will never take up more
          // than 60% of the vertical space on the screen (80vh = 60vh * 4 / 3).
          margin: auto;
          width: auto;
          max-width: 80vh;
          height: auto;
          max-height: none;
          aspect-ratio: 4 / 3;
        }
      }
      .image-overlay,
      .browse-category {
        position: relative;
        border: 2px $lightgray-lighten-6 solid;
        min-height: 0;
        max-height: none;
        overflow: hidden;
        z-index: 0;
      }
      .image-overlay::before {
        // Not needed for .browse-category at this time.
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-image: linear-gradient(rgba(0, 0, 0, 0.0), rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.5));
        z-index: 1;
        content: "";
      }
      &:hover .image-overlay::after,
      &:hover .browse-category::after { // darken on hover
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-image: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, calc(5 / 9)), rgba(0, 0, 0, 0.4));
        z-index: 2;
        content: "";
      }
      .category-caption,
      .text-overlay {
        position: absolute;
        bottom: 1rem;
        left: 1rem;
        right: 1rem;
        width: auto;
        height: auto;
        align-content: end;
        background: none;
        z-index: 100;

        * {
          // Because the element and class varies depending on whether this is a
          // category browse or a landing page, unset everything and then target
          // :first-child and :not(:first-child) to provide more specific
          // stylings.
          all: unset
        }
        :first-child { // the title
          display: block;
          font-size: 1.25rem;
          font-weight: 300;
        }
        :not(:first-child) { // the caption
          display: block;
          font-size: .875rem;
          font-weight: 200;
          text-transform: uppercase;
        }
      }
    }
  }
}
#sidebar {
  // Make the sidebar text line up with the navbar and the breadcrumbs by
  // removing outer padding in cases where that makes sense.
  @include media-breakpoint-down(md) {
    // Below this breakpoint, the sidebar takes up the full horizontal space.
    padding: 0;
  }
  &.order-first {
    padding-left: 0;
  }
  &.order-last {
    padding-right: 0;
  }
  .nav-heading {
    margin: 0 0 1rem;
    border-bottom: 1px $unofficial-lightgray-darken-45 solid !important;
    padding: 0 0 .125rem;
    color: $lightgray-darken-80;
    font-size: 1.3125rem;
    font-weight: 600;
    line-height: 1.6;

    &~.nav-heading {
      margin-top: 4rem;
    }
  }
  &#sidebar .sidenav {
    // #sidebar is listed again for heightened specificity; we want these styles
    // to always override Spotlight ones.
    li {
      // In what is probably a bug, Spotlight currently does not attach a class
      // to list items on feature pages (it should be `.nav-item`). No matter,
      // we can just match them by element name.
      display: list-item;
      list-style: none;
      margin: .5rem 0;
      font-size: 1rem;
      font-weight: 200;
      line-height: 1.75;

      &:first-child {
        margin-top: 0;
      }
      &:last-child {
        margin-bottom: 0;
      }
      &.active {
        font-weight: 500;

        &>a[href],
        &>*:first-child a[href] {
          // Don’t use a simple descendant selector here to avoid also catching
          // links in subsections.
          color: inherit;
        }
      }
      &>.h6 {
        // For some reason, Spotlight sticks top‐level list items in a
        // <h2 class=h6>… We can do much better than this.
        all: unset
      }
      a[href] {
        // Again, these prolly *should* all have a `.nav-link` class, but don’t
        // presently on feature pages.
        color: $link-color;

        &:hover {
          color: $link-hover-color;
          text-decoration: underline;
        }
      }
    }
    &>li { // top‐level items
      // The :first-child and :last-child above still have higher specificity
      // than this.
      //
      // ☡ The font styling here *will* inherit into descendants if it isn’t
      // overridden!
      margin: .75rem 0;
      color: $lightgray-darken-80;
      font-size: 1.3125rem;
      font-weight: 600;
      line-height: 1.6;

      &.active {
        font-weight: 600;
      }
      &>:first-child:not(:last-child) { // subsection headers
        display: block;
        border-bottom: 1px $unofficial-lightgray-darken-45 solid !important;
        padding: 0 0 .125rem;
      }
    }
    .subsection {
      margin: 1rem 0 0;
      padding: 0;
    }
  }
}

/* Footer *****/
#footer {
  margin: auto 0 0;
  color: $text-on-dark;
  background: $starlight-primary;

  a[href] {
    color: inherit;
  }
  strong {
    font-weight: 900;
  }
  &>div {
    // The `repeat(auto-fit, …)` of this grid requires a fixed minimum width for
    // columns; it should match the width of the UC Santa Barbara wordmark. Note
    // that this provides somewhat different (better) breakpoints than the UCSB
    // Drupal theme, which (in typical Bootstrap fashion) fudges it based on
    // screen size and switches to a more vertical layout far sooner than it needs
    // to.
    display: grid;
    padding: 2.25rem .9375rem;
    grid: auto-flow / repeat(auto-fit, minmax(15.625rem, 1fr));
    gap: 0 1.875rem;

    h6 {
      margin: 1.45rem 0 1rem;
      border-bottom: 1px rgba($base-white, .5) solid;
      padding-bottom: .375rem;
      font-size: .75rem;
      line-height: 1.25rem;
      letter-spacing: calc(1em / 12);
      text-transform: uppercase;

      svg {
        display: block;
        margin: -.2rem 0 -.375rem;
        height: 1.875rem;
        width: 15.625rem;
        color: inherit;
        fill: currentcolor;
        stroke: transparent;
      }
    }
    nav {
      // Each nav can have multiple h6‐ul pairs. Don’t stick these in sections.
      // Because they are layed out using grid, they won’t change much at small
      // sizes, so be mindful of how tightly you pack things here.
      display: grid;
      grid: auto auto / auto-flow;

      h6 {
        grid-row: 1 / span 1;
      }
      ul {
        display: grid;
        grid-row: 2 / span 1;
        padding: 0;

        &>li {
          display: block;
        }
        &:only-of-type {
          grid: auto-flow / 1FR 1FR;
        }
        &.social {
          // The grid sizing here is such that two columns equal the width of the
          // wordmark, which is bigger than any social media platform seems to
          // need, but much tighter than the breakpoint in the Drupal theme.
          grid: auto-flow / repeat(auto-fit, minmax(7.625rem, 1fr));
          gap: 0 .375em;

          &>li>a {
            // Use a grid for these because it lets us not worry about whitespace.
            // In the UCSB Drupal theme, the social media icons are outside of the
            // links, but it makes more sense to have them inside.
            display: grid;
            grid: auto-flow / max-content auto;
            gap: 0 .375em;

            svg {
              height: 1.75em;
              color: inherit;
              fill: currentcolor;
              stroke: transparent;
            }
          }
        }
      }
    }
  }
}
#footer-bottom {
  // Most of the complexity in this layout is keeping things together and
  // responsive on small sizes (behaviour does not attempt to mirror the main
  // UCSB Drupal theme for this, which is bad at it). Hence the wrapping
  // flexboxen inside of wrapping flexboxen.
  margin: 0;
  padding: 1rem 1.25rem 3rem;
  color: $base-white;
  background: $starlight-dark-primary;
  font-size: .75rem;

  a[href] {
    color: inherit;
  }
  p,
  ul,
  table {
    margin: 0;
    width: max-content;
    max-width: 100%;
  }
  &>div {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    gap: .375rem 1rem;

    &>div {
      display: flex;
      flex: auto;
      flex-flow: row wrap;
      width: max-content;
      max-width: 100%;
      gap: .375rem 1rem;

      &>nav {
        display: flex;
        flex-flow: row wrap;
        gap: 0 1rem;

        &>ul {
          display: contents;

          &>li {
            display: block;
          }
        }
      }
    }
    &>table {
      display: flex;
      flex-flow: row wrap;
      gap: 0 1rem;

      &>thead,
      &>tbody,
      &>tfoot {
        display: contents;

        &>tr {
          display: contents;

          &>th,
          &>td {
            display: block;

            &:empty {
              display: none;
            }
          }
        }
      }
    }
  }
}

/* Bits & Pieces *****/
div.st-blocks:last-child {
  // Pads the bottom of the edit area to ensure there is room for dropdowns,
  // etc. See <https://gitlab.com/surfliner/surfliner/issues/226>.
  padding-bottom: 12rem;
}
.st-format-bar {
  // Styling for the popup formatting bar.
  border-radius: 0;
  color: $text-on-dark;
  background: $lightgray-darken-80;

  .st-format-btn {
    border-color: currentcolor;
    color: inherit;
  }
  .st-format-btn:hover,
  .st-format-btn--is-active {
    background: $unofficial-lightgray-darken-45;
  }
}
