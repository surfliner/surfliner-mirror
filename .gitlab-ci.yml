image: $CI_REGISTRY_IMAGE/builder

stages:
  - prebuild
  - build
  - lint
  - test

variables:
  DOCKER_DRIVER: overlay

rebuild-base:
  stage: prebuild
  services:
    - name: docker:dind
  script:
    - registry_login
    - cd docker/base
    - docker build -t $CI_REGISTRY_IMAGE/builder .
    - docker push $CI_REGISTRY_IMAGE/builder
  when: manual

rebuild-solr:
  stage: prebuild
  services:
    - name: docker:dind
  script:
    - registry_login
    - cd docker/solr
    - docker build -t $CI_REGISTRY_IMAGE/solr .
    - docker push $CI_REGISTRY_IMAGE/solr
  when: manual

lark-code-quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - code_quality "lark"
  artifacts:
    reports:
      codequality: lark/gl-code-quality-report.json
  only:
    changes:
      - lark/**/*
  except:
    variables:
      - $CODE_QUALITY_DISABLED

starlight-code-quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - code_quality "starlight"
  artifacts:
    reports:
      codequality: starlight/gl-code-quality-report.json
  only:
    changes:
      - starlight/**/*
  except:
    variables:
      - $CODE_QUALITY_DISABLED

starlight-dependency-scanning:
  stage: test
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - cd starlight
    - dependency_scanning
  artifacts:
    reports:
      dependency_scanning: starlight/gl-dependency-scanning-report.json
  only:
    changes:
      - starlight/**/*
    variables:
      - $GITLAB_FEATURES =~ /\bdependency_scanning\b/
  except:
    variables:
      - $DEPENDENCY_SCANNING_DISABLED

lark-dependency-scanning:
  stage: test
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - cd lark
    - dependency_scanning
  artifacts:
    reports:
      dependency_scanning: lark/gl-dependency-scanning-report.json
  only:
    changes:
      - lark/**/*
    variables:
      - $GITLAB_FEATURES =~ /\bdependency_scanning\b/
  except:
    variables:
      - $DEPENDENCY_SCANNING_DISABLED

lark-ruby-build:
  stage: build
  services:
    - name: docker:dind
  script:
    - cd lark
    - registry_login
    - docker build -t $CI_REGISTRY_IMAGE/lark_web:latest .
    - docker push $CI_REGISTRY_IMAGE/lark_web:latest
  only:
    changes:
      - .gitlab-ci.yml
      - lark/Dockerfile

lark-lint:
  stage: lint
  image: $CI_REGISTRY_IMAGE/lark_web:latest
  script:
    - cd lark
    - bundle check || bundle
    - bundle exec rubocop
  only:
    changes:
      - .gitlab-ci.yml
      - .styles/**/*
      - lark/**/*

lark-unit-tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/lark_web:latest
  variables:
    SOLR_CORE_NAME: lark-test
    SOLR_CONFIG_DIR: lark/solr/config
    REPOSITORY_URL: $CI_REPOSITORY_URL
    SOLR_CONFIG_COMMIT_SHA: $CI_COMMIT_SHA
  services:
    - name: $CI_REGISTRY_IMAGE/solr
      alias: solr
  script:
    - cd lark
    - bundle check || bundle
    - bundle exec rspec
  only:
    changes:
      - .gitlab-ci.yml
      - Dockerfile
      - lark/**/*

starlight-build:
  stage: build
  services:
    - name: docker:dind
  script:
    - registry_login
    - cd starlight
    - docker build -t $CI_REGISTRY_IMAGE/starlight_web:latest .
    - docker push $CI_REGISTRY_IMAGE/starlight_web:latest
  only:
    changes:
      - .gitlab-ci.yml
      - starlight/Dockerfile

starlight-lint:
  stage: lint
  image: $CI_REGISTRY_IMAGE/starlight_web:latest
  script:
    - cd starlight
    - gem update bundler
    - bundle check || bundle
    - bundle exec rubocop
  only:
    changes:
      - .gitlab-ci.yml
      - .styles/**/*
      - starlight/**/*

starlight-test:
  image: $CI_REGISTRY_IMAGE/starlight_web:latest
  allow_failure: true
  stage: test
  variables:
    DATABASE_URL: "postgres://postgres@postgres/starlight-test"
    SOLR_CORE_NAME: "starlight-test"
    SOLR_CONFIG_DIR: "starlight/solr/config"
    SOLR_CONFIG_COMMIT_SHA: $CI_COMMIT_SHA
    SOLR_URL: "http://solr:8983/solr/starlight-test"
    REPOSITORY_URL: $CI_REPOSITORY_URL
    SELENIUM_URL: "http://chrome:4444/wd/hub/"
    RAILS_ENV: "test"
    START_XVFB: "false"
  services:
    - name: $CI_REGISTRY_IMAGE/solr
      alias: solr
    - name: selenium/standalone-chrome:latest
      alias: chrome
    - postgres:11-alpine
  script:
    - cd starlight
    - gem update bundler
    - bundle install --jobs $(nproc) --path=vendor
    - yarn install
    - RAILS_ENV=test bundle exec rake db:create db:schema:load
    - RAILS_ENV=test bundle exec rspec --format progress --format RspecJunitFormatter --out rspec.xml
  artifacts:
    reports:
      junit: starlight/rspec.xml
    when: on_failure
    paths:
      - starlight/tmp/screenshots
  cache:
    key: starlight-deps
    paths:
      - starlight/vendor/
      - starlight/public/
  only:
    changes:
      - .gitlab-ci.yml
      - Dockerfile
      - starlight/**/*


# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # helper functions for CI tasks
  [[ "$TRACE" ]] && set -x
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

  function registry_login() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function code_quality() {
    docker run --env SOURCE_CODE="$PWD" \
               --volume "$PWD":/code \
               --volume /var/run/docker.sock:/var/run/docker.sock \
               "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code/$1
  }

  function dependency_scanning() {
    case "$CI_SERVER_VERSION" in
      *-ee)
        docker run --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" \
                   --volume "$PWD:/code" \
                   --volume /var/run/docker.sock:/var/run/docker.sock \
                   "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
        ;;
      *)
        echo "GitLab EE is required"
        ;;
    esac
  }

before_script:
  - *auto_devops
