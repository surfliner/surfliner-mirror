#!/usr/bin/env ruby
require "bundler/inline"

gemfile do
  source "https://rubygems.org"
  gem "bunny", "2.19.0"
  gem "pg", "1.3.0"
end

rabbitmq_host = ENV.fetch("RABBITMQ_HOST")
rabbitmq_user = ENV.fetch("RABBITMQ_USERNAME")
rabbitmq_password = ENV.fetch("RABBITMQ_PASSWORD")
rabbitmq_port = ENV.fetch("RABBITMQ_NODE_PORT_NUMBER")

connection_url = "amqp://#{rabbitmq_user}:#{rabbitmq_password}@#{rabbitmq_host}:#{rabbitmq_port}".freeze
puts "Rabbitmq message broker connection url: #{connection_url}"

begin
  connection = Bunny.new(connection_url)
  connection.start
rescue Bunny::TCPConnectionFailed => e
  puts "Connection to #{rabbitmq_host} failed with: #{connection_url}"
rescue Bunny::PossibleAuthenticationFailureError => e
  puts "Failed to authenticate to #{rabbitmq_host} with: #{connection_url}"
end

channel = connection.create_channel
exchange = channel.topic(ENV["RABBITMQ_TOPIC"])
# TODO: where is queue declared?
queue = channel.queue('tidewater_queue')

queue.bind(exchange, routing_key: ENV["RABBITMQ_TIDEWATER_ROUTING_KEY"])

puts ' [*] Waiting for updates. To exit press CTRL+C'

begin
  queue.subscribe(block: true) do |delivery_info, properties, body|
    puts " [x] #{body}"
  end
rescue Interrupt => _
  channel.close
  connection.close
end
