#!/usr/bin/env ruby
require "bundler/inline"
require "date"
require "json"
require "logger"

require_relative "../lib/tidewater"

logger = Logger.new($stdout)
logger.level = ENV.fetch("LOG_LEVEL") { Logger::INFO }

gemfile do
  source "https://rubygems.org"

  gem "bunny", "2.19.0"
  gem "pg", "1.3.2"
  gem "sequel", "5.53.0"
end

rabbitmq_host = ENV.fetch("RABBITMQ_HOST")
rabbitmq_user = ENV.fetch("RABBITMQ_USERNAME")
rabbitmq_password = ENV.fetch("RABBITMQ_PASSWORD")
rabbitmq_port = ENV.fetch("RABBITMQ_NODE_PORT_NUMBER")
rabbitmq_topic = ENV.fetch("RABBITMQ_TOPIC")
rabbitmq_routing_key = ENV.fetch("RABBITMQ_TIDEWATER_ROUTING_KEY")

connection_url = "amqp://#{rabbitmq_user}:#{rabbitmq_password}@#{rabbitmq_host}:#{rabbitmq_port}".freeze
logger.info("Rabbitmq message broker connection url: #{connection_url.sub(rabbitmq_password, "REDACTED")}")

begin
  connection = Bunny.new(connection_url)
  connection.start
rescue Bunny::TCPConnectionFailed
  logger.error("Connection to #{rabbitmq_host} failed")
rescue Bunny::PossibleAuthenticationFailureError
  logger.error("Failed to authenticate to #{rabbitmq_host}")
end

channel = connection.create_channel
exchange = channel.topic(rabbitmq_topic)
queue = channel.queue("", exclusive: true)
queue.bind(exchange, routing_key: rabbitmq_routing_key)

logger.info(" [*] Waiting for updates. To exit press CTRL+C")

begin
  queue.subscribe(block: true) do |delivery_info, properties, payload|
    logger.info(" [x] message received with payload: #{payload}")
    payload_data = JSON.parse(payload)
    payload_resource_url = payload_data["resourceUrl"]
    raise "Payload resourceUrl is not defined" unless payload_resource_url

    # TODO: use the payload_resource_url to get the data
    # payload_record = GET request to superskunk
    payload_record = {}
    Persisters::SuperskunkPersister.create_or_update(record: payload_record)
  end
rescue Interrupt => _
  channel.close
  connection.close
end
