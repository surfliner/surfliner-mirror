#!/usr/bin/env ruby
require "bundler/inline"
require "date"
require "json"
require "logger"
require "net/http"
require "active_support/core_ext/hash/indifferent_access"

# don't buffer log output
$stdout.sync = true
logger = Logger.new($stdout)
logger.level = ENV.fetch("LOG_LEVEL") { Logger::INFO }

gemfile do
  source "https://rubygems.org"

  gem "bunny", "2.19.0"
  gem "pg", "1.3.3"
  gem "sequel", "5.53.0"
  gem "oai", "1.1.0"
end

require_relative "../lib/tidewater"

rabbitmq_host = ENV.fetch("RABBITMQ_HOST")
rabbitmq_user = ENV.fetch("RABBITMQ_USERNAME")
rabbitmq_password = ENV.fetch("RABBITMQ_PASSWORD")
rabbitmq_port = ENV.fetch("RABBITMQ_NODE_PORT_NUMBER")
rabbitmq_topic = ENV.fetch("RABBITMQ_TOPIC")
rabbitmq_routing_key = ENV.fetch("RABBITMQ_TIDEWATER_ROUTING_KEY")

connection_url = "amqp://#{rabbitmq_user}:#{rabbitmq_password}@#{rabbitmq_host}:#{rabbitmq_port}".freeze
logger.info("Rabbitmq message broker connection url: #{connection_url.sub(rabbitmq_password, "REDACTED")}")

begin
  connection = Bunny.new(connection_url)
  connection.start
rescue Bunny::TCPConnectionFailed
  logger.error("Connection to #{rabbitmq_host} failed")
rescue Bunny::PossibleAuthenticationFailureError
  logger.error("Failed to authenticate to #{rabbitmq_host}")
end

channel = connection.create_channel
exchange = channel.topic(rabbitmq_topic)
queue = channel.queue("", exclusive: true)
queue.bind(exchange, routing_key: rabbitmq_routing_key)

logger.info(" [*] Waiting for updates. To exit press CTRL+C")

begin
  queue.subscribe(block: true) do |delivery_info, properties, payload|
    logger.info(" [x] message received with payload: #{payload}")
    payload_data = JSON.parse(payload)
    payload_resource_url = payload_data["resourceUrl"]
    raise "Payload resourceUrl is not defined" unless payload_resource_url

    # use the payload_resource_url to get the data
    uri = URI(payload_resource_url)
    req = Net::HTTP::Get.new(uri)
    req["Accept"] = "application/json"
    req["HTTP_ACCEPT"] = "application/ld+json;profile=#{ENV.fetch("OAI_PROFILE", "tag:surfliner.github.io,2022:api/oai_dc")}"

    begin
      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == "https") { |http|
        http.request(req)
      }

      if res.is_a?(Net::HTTPSuccess)
        record_data = res.body

        # Persist OaiItem
        oai_item = Converters::OaiItemConverter.from_json(payload_resource_url, record_data)
        Persisters::SuperskunkPersister.create_or_update(record: oai_item.with_indifferent_access)

        # Persist OaiSet and SetEntry
        item_source_iri = oai_item["source_iri"]
        oai_sets = Converters::OaiSetConverter.from_json(record_data)
        oai_sets.each do |oai_set|
          set_source_iri = oai_set["source_iri"]
          Persisters::SuperskunkSetPersister.create_or_update(record: oai_set.with_indifferent_access)
          unless Persisters::SuperskunkSetEntryPersister.entry_exists?(set_source_iri: set_source_iri, item_source_iri: item_source_iri)
            Persisters::SuperskunkSetEntryPersister.create(set_source_iri: set_source_iri, item_source_iri: item_source_iri)
          end
        end
      else
        logger.error("Error response #{res.code}: #{res}")
      end
    rescue => err
      logger.error("Error: #{err}")
    end
  end
rescue Interrupt => _
  channel.close
  connection.close
end
