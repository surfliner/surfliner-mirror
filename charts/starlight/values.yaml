# Default values for starlight.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
workerReplicaCount: 1

image:
  repository: registry.gitlab.com/surfliner/surfliner/starlight_web
  name: starlight_web
  tag: stable
  pullPolicy: Always

util:
  image:
    repository: registry.gitlab.com/surfliner/surfliner/surfliner-util
    name: surfliner-util
    tag: stable
    pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Set to true if a Secret already exists in the namespace for the Deployment
existingSecret:
  name: starlight
  enabled: false

# additional volumes and volume mounts, evaluated as a template, e.g.
#
#  extraVolumeMounts
#    - name: local-app
#      mountPath: /home/starlight/app
#  extraVolumes:
#    - name: local-app
#      hostPath:
#        path: /src
#        type: DirectoryOrCreate
extraVolumeMounts: []
extraVolumes: []

# Extra container spec configuration
# Example: (enabling pry debugging for local development)
# Note: with this enabled, one can `kubectl attach` to a running container with a binding.pry breakpoint
#
#extraContainerConfiguration:
# stdin: true
# tty: true
extraContainerConfiguration: []

# additional environment variables, evaluated as a template. e.g.
#
#  extraEnvVars:
#    - name: TEST_SOLR_URL
#      value: "my-test-solr-url"
extraEnvVars: []

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 20m
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: ['starlight.local']
  tls: []



starlight:
  solrRunMode: cloud
  disableSolrConfigInit: false
  allow_robots: false # allow crawling via robots.txt
  loadSolrConfigSet: true # use false to skip solr configset maintenance init container
  application:
    name: "Starlight"
    themes: "ucsb,surfliner,ucsd"
  analytics: {}
    # webPropertyId: # e.g UA-12345555-11
  port: 3000
  rails:
    db_adapter: postgresql
    db_setup_command: "db:migrate"
    environment: production
    log_to_stdout: true
    max_threads: 5
    queue: sidekiq
    serve_static_files: true
  sample_data: false
  sitemaps:
    enabled: true
  # s3-compatible storage via Amazon or Minio
  storage:
    enabled: true
    accessKey: starlight-access-key
    acl: 'bucket-owner-full-control' #aws/minio ACL
    bucket: starlight
    # endpointUrl: aws/minio (optional for aws, reguired for minio)
    region: us-west-2
    secretKey: starlight-secret-key
  backups:
    import:
      enabled: false
      force: false
      # asset_host: new host for CMS assets. e.g.: https://starlight-uploads-prod.s3.us-west-2.amazonaws.com
      solrReindex: false # flag to run a full solr reindex on import/initial deploy
      # dbBackupSource: s3:// URL or local file path for importing psql database backup source. e.g: s3://ucsd/starlight.dmp or /tmp/starlight-backup.dmp
      # dbBackupDestination: s3:// URL or local file path for psql database backup destination file. e.g: s3://ucsd/starlight.dmp or /tmp/starlight-backup.dmp
      # oldAppUrl: url for previous system, used for iiif url migration. i.e. https://exhibits.ucsd.edu
      # sourcePath: s3:// URL or local directory path for importing image upload backup source. e.g. s3://my-bucket/uploads or /uploads
    export:
      enabled: false
      # dbBackupSource: s3:// URL or local file path for psql database backup source file. e.g: s3://ucsd/starlight.dmp or /tmp/starlight-backup.dmp
      # dbBackupDestination: s3:// URL or local file path for psql database backup destination file. e.g: s3://ucsd/starlight.dmp or /tmp/starlight-backup.dmp
      # destinationPath: s3:// URL for image backups. e.g: s3://my-bucket/starlight-image-backups
      # schedule: k8s cron schedule for exports. e.g. "30 8 * * *"
      # sourcePath: s3:// URL or local directory path to source path. e.g. s3://my-bucket/uploads or /uploads
  email:
    # these needs to be set to something, even if it doesn't work, or else rails errors out on startup
    from_address: starlight@example.edu
    delivery_method: letter_opener_web # or: smtp
    # see: https://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration
    # smtp_settings:
    #   address: smtp.example.edu
    #   port: 587
    #   user_name: username
    #   password: password
    #   authentication: plain

  auth:
    method: developer
    # only required if method is "google"
    google:
      api_id:
      api_secret:

# Configuration for solr chart
# see: https://github.com/bitnami/charts/blob/master/bitnami/solr/values.yaml
solr:
  enabled: true
  image:
    repository: bitnami/solr
    tag: 8.11.1-debian-10-r33
  authentication:
    enabled: true
    adminUsername: admin
    adminPassword: admin
  coreName: starlight # used if starlight.solrRunMode is 'standalone'
  collection: starlight # used if starlight.solrRunMode is 'cloud'
  cloudBoostrap: true
  cloudEnabled: true
  persistence:
    enabled: true
  zookeeper:
    enabled: true
    persistence:
      enabled: true
# Settings for solr java memory
  # javaMem: "-Xms2g -Xmx3g"
  # Settings for zk java memory
  # zookeeper:
  #   env:
  #     JVMFLAGS: "-Xms512m -Xmx1g"
  # Set if using external zookeeper
  # externalZookeeper:
  #   servers:

  # To use an external/preexisting solr/zk, set solr.enabled to false, then
  #   * set solrHostname to external solr FQDN
  #   * set solrPort to external solr port
  #   * set zookeeperHostname to external zookeeper FQDN
  #   * set zookeeperPort to external zookeeper port
  # solrHostname: external-starlight-solr-fqdn
  # solrPort: "8983"
  # zookeeperHostname: external-starlight-zookeeper-fqdn
  # zookeeperPort: "2181"

# Configuration for memcached chart
# see: https://github.com/bitnami/charts/blob/master/bitnami/memcached/README.md
memcached:
  enabled: true
  architecture: high-availability
  # requires architecture: high-availability
  persistence:
    enabled: true
    size: 8Gi
  image:
    repository: bitnami/memcached
    tag: 1.6.13-debian-10-r7

# Configuration for minio chart
# This is currently only used for Review applications in CI/CD pipelines
# see: https://github.com/bitnami/charts/blob/master/bitnami/minio/README.md
minio:
  enabled: false
  defaultBuckets: starlight:download
  auth:
    rootUser: starlight-access-key
    rootPassword: starlight-secret-key
  persistence:
    enabled: false
  image:
    repository: bitnami/minio
    tag: 2021.12.29-debian-10-r13

# Configuration for postgresql chart
# see: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
postgresql:
  image:
    repository: bitnami/postgresql
    tag: 12.9.0-debian-10-r60
  enabled: true
  cpu: 1000m
  memory: 1Gi
  postgresqlUsername: starlight
  postgresqlPassword: starlight_pass
  postgresqlDatabase: starlight_db
  postgresqlPostgresPassword: starlight_admin
  servicePort: 5432
  persistence:
    size: 10Gi

# Configuration for redis chart
# see: https://github.com/helm/charts/blob/master/stable/redis/README.md
redis:
  image:
    repository: bitnami/redis
    tag: 6.2.6-debian-10-r98
  auth:
    enabled: false

# overridden in the individual deployment configurations;
# see e.g. ../snippets/starlight/production/ucsb.yaml
resources:
  limits:
    cpu: 1000m
    memory: 1000Mi
  requests:
    cpu: 500m
    memory: 500Mi
workerResources:
  limits:
    cpu: 500m
    memory: 500Mi
  requests:
    cpu: 200m
    memory: 200Mi

nodeSelector: {}

tolerations: []
