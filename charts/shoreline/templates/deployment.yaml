apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "shoreline.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "shoreline.name" . }}
    helm.sh/chart: {{ include "shoreline.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "shoreline.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "shoreline.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: configure-solr
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command:
            - "sh"
            - "-c"
            - |
              COUNTER=0;
              while [ $COUNTER -lt 120 ]; do
                if nc {{ .Release.Name }}-solr-svc 8983; then
                  curl -H 'Content-type: application/json' -d '{create: {name: collection1, config: solrconfig, numShards: 1}}' {{ .Release.Name }}-solr-svc:8983/api/collections/
                  sleep 10s
                  bin/rake shoreline:solrconfig['collection1','solr/conf']
                  exit 0;
                fi
                COUNTER=$(( COUNTER+1 ));
                sleep 2s;
              done;
              echo "Failed to create Solr core after 240 secs";
              exit 1;
        {{- if .Values.sample_data }}
        - name: ingest-sample-data
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command:
            - "sh"
            - "-c"
            - |
              COUNTER=0;
              while [ $COUNTER -lt 120 ]; do
                echo 'trying to connect to {{ .Release.Name }}-geoserver on port 80';
                if nc {{ .Release.Name }}-geoserver 80 ; then
                  echo "Found GeoServer; ingesting..."

                  for shape in $(ls spec/fixtures/shapefiles); do
                    echo "Ingesting ${shape}..."
                    bundle exec rake shoreline:publish["spec/fixtures/shapefiles/${shape}"]
                  done

                  exit 0;
                fi
                COUNTER=$(( COUNTER+1 ));
                sleep 2s;
              done;
              echo "Failed to find GeoServer after 240 secs";
              exit 1;
          env:
            - name: "SHORELINE_PROVENANCE"
              value: "UC Santa Barbara"
            - name: "SHORELINE_ACCESS"
              value: Public
            - name: "DATABASE_ADAPTER"
              value: postgresql
            - name: "DATABASE_HOST"
              value: {{ template "shoreline.postgresql.fullname" . }}
            - name: "GEOBLACKLIGHT_DOWNLOAD_PATH"
              value: /data/tmp/cache/downloads
            - name: "GEOSERVER_HOST"
              value: {{ .Values.geoserver.ingress.hosts | first |  }}
            - name: "GEOSERVER_INTERNAL_HOST"
              value: {{ template "shoreline.geoserver.fullname" . }}
            - name: "GEOSERVER_PASSWORD"
              value: geoserver
            - name: "GEOSERVER_PORT"
              value: "80"
            - name: "GEOSERVER_USER"
              value: admin
            - name: "POSTGRES_DB"
              value: {{ .Values.postgresql.postgresqlDatabase }}
            - name: "POSTGRES_PORT"
              value: {{ .Values.postgresql.servicePort | quote }}
            - name: "POSTGRES_USER"
              valueFrom:
                secretKeyRef:
                  name: {{ template "shoreline.fullname" . }}
                  key: db-username
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ template "shoreline.fullname" . }}
                  key: db-password
            - name: "RAILS_ENV"
              value: production
            - name: "SECRET_KEY_BASE"
              value: {{ randAlphaNum 20 | b64enc }}
            - name: "SOLR_HOST"
              value: {{ template "shoreline.solr.fullname" . }}-svc
            - name: "SOLR_PORT"
              value: "8983"
            - name: "SOLR_CORE_NAME"
              value: collection1
        {{- end }}
      volumes:
        - name: downloads
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: downloads
              mountPath: /data/tmp/cache/downloads
          env:
            - name: "DATABASE_ADAPTER"
              value: postgresql
            - name: "DATABASE_HOST"
              value: {{ template "shoreline.postgresql.fullname" . }}
            - name: "GEOBLACKLIGHT_DOWNLOAD_PATH"
              value: /data/tmp/cache/downloads
            - name: "GEOSERVER_HOST"
              value: {{ .Values.geoserver.ingress.hosts | first |  }}
            - name: "GEOSERVER_INTERNAL_HOST"
              value: {{ template "shoreline.geoserver.fullname" . }}
            - name: "GEOSERVER_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ template "shoreline.fullname" . }}
                  key: geoserver-admin-password
            - name: "GEOSERVER_PORT"
              value: "80"
            - name: "GEOSERVER_USER"
              value: admin
            - name: "POSTGRES_DB"
              value: {{ .Values.postgresql.postgresqlDatabase }}
            - name: "POSTGRES_PORT"
              value: {{ .Values.postgresql.servicePort | quote }}
            - name: "POSTGRES_USER"
              valueFrom:
                secretKeyRef:
                  name: {{ template "shoreline.fullname" . }}
                  key: db-username
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ template "shoreline.fullname" . }}
                  key: db-password
            - name: "RAILS_ENV"
              value: production
            - name: "RAILS_SERVE_STATIC_FILES"
              value: "true"
            - name: "SECRET_KEY_BASE"
              value: {{ randAlphaNum 20 | b64enc }}
            - name: "SHORELINE_THEME"
              value: {{ .Values.theme }}
            - name: "SOLR_HOST"
              value: {{ template "shoreline.solr.fullname" . }}-svc
            - name: "SOLR_PORT"
              value: "8983"
            - name: "SOLR_CORE_NAME"
              value: collection1
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
