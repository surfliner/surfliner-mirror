apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "shoreline.fullname" . }}
  labels:
{{ include "shoreline.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "shoreline.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "shoreline.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: configure-solr
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          envFrom:
            - configMapRef:
                name: {{ include "shoreline.fullname" . }}-env
            - secretRef:
                name: {{ template "shoreline.fullname" . }}
          command:
            - "sh"
            - "-c"
            - |
              ./bin/upload-solr-configs.sh && ./bin/create-solr-collection.sh
        {{- if .Values.sample_data }}
        - name: ingest-sample-data
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command:
            - "sh"
            - "-c"
            - |
              COUNTER=0;
              while [ $COUNTER -lt 120 ]; do
                echo 'trying to connect to {{ .Release.Name }}-geoserver on port 80';
                if nc {{ .Release.Name }}-geoserver 80 ; then
                  echo "Found GeoServer; ingesting..."

                  for shape in $(ls spec/fixtures/shapefiles); do
                    echo "Ingesting ${shape}..."
                    bundle exec rake shoreline:publish["spec/fixtures/shapefiles/${shape}"]
                  done

                  exit 0;
                fi
                COUNTER=$(( COUNTER+1 ));
                sleep 2s;
              done;
              echo "Failed to find GeoServer after 240 secs";
              exit 1;
          envFrom:
            - configMapRef:
                name: {{ include "shoreline.fullname" . }}-env
            - secretRef:
                name: {{ template "shoreline.fullname" . }}
        {{- end }}
      volumes:
        - name: downloads
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: downloads
              mountPath: /data/tmp/cache/downloads
          envFrom:
            - configMapRef:
                name: {{ include "shoreline.fullname" . }}-env
            - secretRef:
                name: {{ template "shoreline.fullname" . }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
