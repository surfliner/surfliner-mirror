#!/usr/bin/env ruby
require "bundler/setup"
require "bunny"
require "date"
require "json"
require "logger"
require "net/http"

# don't buffer log output
$stdout.sync = true
logger = Logger.new($stdout)
logger.level = ENV.fetch("LOG_LEVEL") { Logger::INFO }

rabbitmq_host = ENV.fetch("RABBITMQ_HOST")
rabbitmq_password = ENV.fetch("RABBITMQ_PASSWORD")
rabbitmq_port = ENV.fetch("RABBITMQ_NODE_PORT_NUMBER")
rabbitmq_queue = ENV.fetch("RABBITMQ_QUEUE")
rabbitmq_routing_key = ENV.fetch("RABBITMQ_SHORELINE_ROUTING_KEY")
rabbitmq_topic = ENV.fetch("RABBITMQ_TOPIC")
rabbitmq_user = ENV.fetch("RABBITMQ_USERNAME")

connection_url = "amqp://#{rabbitmq_user}:#{rabbitmq_password}@#{rabbitmq_host}:#{rabbitmq_port}".freeze
logger.info("Rabbitmq message broker connection url: #{connection_url.sub(rabbitmq_password, "REDACTED")}")

begin
  connection = Bunny.new(connection_url)
  connection.start
rescue Bunny::TCPConnectionFailed
  logger.error("Connection to #{rabbitmq_host} failed")
rescue Bunny::PossibleAuthenticationFailureError
  logger.error("Failed to authenticate to #{rabbitmq_host}")
end

channel = connection.create_channel
exchange = channel.topic(rabbitmq_topic, auto_delete: true)
queue = channel.queue(rabbitmq_queue, durable: true)
queue.bind(exchange, routing_key: rabbitmq_routing_key)

logger.info(" [*] Waiting for updates. To exit press CTRL+C")

begin
  queue.subscribe(block: true) do |delivery_info, properties, payload|
    logger.info(" [x] message received with payload: #{payload}")
    payload_data = JSON.parse(payload)
    payload_resource_url = payload_data["resourceUrl"]
    raise "Payload resourceUrl is not defined" unless payload_resource_url

    # use the payload_resource_url to get the data
    uri = URI(payload_resource_url)
    # TODO: actually query superskunk
    # req = Net::HTTP::Get.new(uri)
    # req["Accept"] = "application/ld+json;profile=\"#{ENV.fetch("SHORELINE_METADATA_PROFILE", "tag:surfliner.gitlab.io,2022:api/shoreline/ingest}\""
    # req["User-Agent"] = ENV.fetch("USER_AGENT_PRODUCT_NAME", "surfliner.shoreline")
  end
rescue Interrupt => _
  channel.close
  connection.close
end
